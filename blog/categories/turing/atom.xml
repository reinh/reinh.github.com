<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Turing | reinh.com]]></title>
  <link href="http://reinh.github.com/blog/categories/turing/atom.xml" rel="self"/>
  <link href="http://reinh.github.com/"/>
  <updated>2013-01-16T11:05:09-08:00</updated>
  <id>http://reinh.github.com/</id>
  <author>
    <name><![CDATA[Rein Henrichs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a Turing Machine Simulator With Ruby (Part&nbsp;1)]]></title>
    <link href="http://reinh.github.com/blog/2011/09/03/building-a-turing-machine-simulator-with-ruby-part-1.html"/>
    <updated>2011-09-03T17:41:00-07:00</updated>
    <id>http://reinh.github.com/blog/2011/09/03/building-a-turing-machine-simulator-with-ruby-part-1</id>
    <content type="html"><![CDATA[<p><span class='caps'>To better understand</span> Turing's machine and its contributions
to mathematics and computer science, we will build a simulator in Ruby. This
simulator will take a description of the machine's configuration, create a
model of the machine, and run through its steps. We will be able to observe the
action of the head and changes to the tape at each step. Hopefully this will
serve to illuminate some aspects of Turing's machine that might otherwise be
less accessible.</p>

<!--more-->


<p>Although the Turing machine is often thought of as prefiguring later computer
science innovations such as the state machine, its original purpose was quite
different. Turing created his machine in an attempt to understand the limits of
mechanical computation, i.e., the limits of <em>computability</em>. The
paper that introduced the Turing machine, published in 1936, refers to
"computable numbers" and their use in solving David Hilbert's <em><a href="http://en.wikipedia.org/wiki/Entscheidungsproblem">Entscheidungsproblem</a></em>, or
"decision problem".</p>

<h2>Turing's Marvelous Machine</h2>

<p>Informally, a Turing machine is a mathematical model of a machine that
mechanically operates on a tape. This tape contains squares where the machine
can read or print a symbol using a tape head. The machine can also move left
and right over the tape, one square at a time.  The machine's operation is
fully determined by a list of elementary instructions such as "in state 42, if
the symbol seen is 0, print a 1; if the symbol seen is 1, shift to the right
and change into state 17; in state 17, if the symbol seen is 0, print a 1 and
change into state 6;" etc. Turing called these instructions <em>m-configurations</em>.
Modern computer scientists typically refer to them as states (as the Turing
machine is a type of <a href="http://en.wikipedia.org/wiki/Finite-state_machine">Finite-state machine</a>). I will refer to
them interchangeably as "instructions" or "states". Turing, in his paper,
labeled these instructions using gothic script lower-case letters.  We will
simply use lower-case letters.</p>

<p>A bit more formally, a Turing machine can be specified as the 3-tuple <script type="math/tex">M= \langle Q, \Gamma, I \ \rangle</script>. <script type="math/tex">Q</script> is a finite, non-empty set of <em>states</em> where <script type="math/tex">q_0 \in Q</script> is the first state; <script type="math/tex">\Gamma</script> is a finite, non-empty set of <em>tape alphabet/symbols</em> with <script type="math/tex">S_0 \in \Gamma</script> representing a blank, also called <script type="math/tex">None</script> (the only symbol allowed to occur on the tape infinitely often at any step during the computation); and <script type="math/tex">I</script> is a finite, non-emtpy set of instructions. An instruction <script type="math/tex">i \in I</script> can be defined with the 5-tuple, or <em>quint</em>, <script type="math/tex">\langle q_i, S_j, S_k/N/E, L/R, q_m \rangle</script>, which consists of the following:</p>

<ul>
<li><script type="math/tex">q_i \in Q </script>, the current state.</li>
<li><script type="math/tex">S_j \in \Gamma</script>, the symbol scanned.</li>
<li>The symbol to be printed

<ul>
<li><script type="math/tex">S_k \in \Gamma</script>, print the symbol <script type="math/tex">S_k</script></li>
<li><script type="math/tex">N</script>, equivalent to <script type="math/tex">S_j</script>, indicates a "noop" (alternatively, print the current symbol again).</li>
<li><script type="math/tex">E</script>, equivalent to <script type="math/tex">S_0</script>, print a blank (erasure).</li>
</ul>
</li>
<li>A head movement instruction:

<ul>
<li><script type="math/tex">L</script>, move the head left.</li>
<li><script type="math/tex">R</script>, move the head right.</li>
</ul>
</li>
<li><script type="math/tex">q_m \in Q</script>, the new state.</li>
</ul>


<p>This is a bit less formal than the definition used by Hopcroft and Ullman, for
instance, but should suffice for our purposes.</p>

<h2>Our First Turing Machine</h2>

<p>With the formal definition out of the way, let's turn to Turing's first
machine, which computes the sequence <em>0 1 0 1 0 1&hellip;</em>. This machine's 3-tuple looks like this:</p>

<ul>
<li><em>Q</em>, the states: <em>{ b, c, e, f }</em></li>
<li><em>&Gamma;</em>, the symbols: <em>{ 0, 1}</em></li>
<li><em>I</em>, the instructions: <script type="math/tex"> \{ \langle b, None, 0, R, c \rangle,  \langle c, None, N, R, e \rangle,  \langle e, None, 1, R, f \ \rangle,  \langle f, None, N, R, b \rangle \} </script></li>
</ul>


<p>In Turing's original table form, these same instructions are represented as:</p>

<table class="text-center">
    <tbody>
        <tr> <th colspan="2">Configuration</th> <th colspan="2">Behavior</th> </tr>
        <tr> <th>m-configuration</th> <th>Tape symbol</th> <th>Tape operations</th> <th>Final m-configuration</th> </tr>
        <tr> <td>b</td> <td>None</td> <td>P0, R</td> <td>c</td> </tr>
        <tr> <td>c</td> <td>None</td> <td>R</td>     <td>e</td> </tr>
        <tr> <td>e</td> <td>None</td> <td>P1, R</td> <td>f</td> </tr>
        <tr> <td>f</td> <td>None</td> <td>R</td>     <td>b</td> </tr>
    </tbody>
</table>


<p>Turing describes the above table as follows:</p>

<p><blockquote><p>This [example] table (and all succeeding tables of the same kind) is to be understood to mean that for a configuration described in the first two columns the operations in the third column are carried out successively, and the machine then goes over into the m-configuration in the final column</p></blockquote></p>

<h2>Once Again, With ASCII</h2>

<p>For our Turing machine simulator, I decided to use an ASCII representation of
the Turing machine's instructions. In this format, the instructions look like
this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Turing's First Example</span><a href='https://github.com/reinh/turing/blob/master/examples/0101010101_simple.turing'>on github.com </a></figcaption><div class="highlight"><pre><code class=''><span class='line'>b, None, P0R, c
</span><span class='line'>c, None, R,   e
</span><span class='line'>e, None, P1R, f
</span><span class='line'>f, None, R,   b</span></code></pre></div></figure></notextile></div></p>

<p>The m-configurations (instructions) in my machines will begin with <em>b</em>, just as Turing's did. (I believe he used <em>b</em> for <em>begin</em>.)</p>

<p>The BNF grammar for this representation is:</p>

<pre><code>&lt;instruction&gt; ::= &lt;ident&gt; "," &lt;symbol&gt; "," &lt;operation&gt; "," &lt;ident&gt; &lt;EOL&gt;
      &lt;ident&gt; ::= &lt;char&gt;
      &lt;symbol ::= &lt;char&gt; | "None"
  &lt;operation&gt; ::= &lt;movement&gt; | &lt;print&gt; &lt;movement&gt;
      &lt;print&gt; ::= 'P' &lt;char&gt;
    &lt;movement ::= 'R' | 'L'
</code></pre>

<h2>Representing An Instruction</h2>

<p>To begin modelling our simulated Turing machine, we need some way to represent
instructions internally. We'll use Ruby arrays as tuples and Ruby symbols as,
well, symbols (with the exception of <em>None</em>, <em>0</em> and <em>1</em>, which will be be
represented as <code>nil</code> and the integers <code>0</code> and <code>1</code>, respectively). Tape operations will be represented as another array of tuples, to wit: <em>Pn</em> as <code>[ :print, n ]</code>, <em>E</em> as <code>[ :erase ]</code>, <em>L</em> as <code>[ :left ]</code>, and <em>R</em> as <code>[ :right ]</code>.</p>

<p>Here is our Ruby representation of the above instruction list:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Turing's First Example (Ruby)  </span></figcaption>
 <div class="highlight"><pre><code class='ruby'><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">[</span> <span class="ss">:b</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">[[</span> <span class="ss">:print</span><span class="p">,</span> <span class="mi">0</span> <span class="o">]</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:right</span> <span class="o">]]</span><span class="p">,</span> <span class="ss">:c</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="o">[</span> <span class="ss">:c</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">[[</span> <span class="ss">:right</span> <span class="o">]]</span><span class="p">,</span>                <span class="ss">:e</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="o">[</span> <span class="ss">:e</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">[[</span> <span class="ss">:print</span><span class="p">,</span> <span class="mi">1</span> <span class="o">]</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:right</span> <span class="o">]]</span><span class="p">,</span> <span class="ss">:f</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="o">[</span> <span class="ss">:f</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">[[</span> <span class="ss">:right</span> <span class="o">]]</span><span class="p">,</span>                <span class="ss">:b</span> <span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></div></figure></notextile></div></p>

<h2>Parsing An Instruction</h2>

<p>Writing a parser for the ASCII instruction format is a fun little exercise. As
a Turing machine is a finite-state machine, it should be no surprise that this
specification grammar forms a regular language (which can be accepted with a
finite-state machine). This means that we can parse it with regular
expressions---without having two problems! (Actually, we'll use the comma
separation to make tokenization a bit easier with <code>String#split</code>, but we're
getting ahead of ourselves.)</p>

<p>We'll use a <code>Turing::Parser</code> class to parse the entire specification. It will
split lines and delegate to <code>Turing::Parser::Line</code> class to parse individual
instruction lines. This in turn will need to parse (lex) individual tokens into a Ruby
representation. We'll start there:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>parse_token()  </span></figcaption>
 <div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Turing</span><span class="o">::</span><span class="ss">Parser</span><span class="p">:</span><span class="ss">:Line</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">parse_token</span><span class="p">(</span><span class="n">token</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;case token</span>
</span><span class='line'><span class="sr">when &quot;None&quot; then nil</span>
</span><span class='line'><span class="sr">when &quot;0&quot;    then 0</span>
</span><span class='line'><span class="sr">when &quot;1&quot;    then 1</span>
</span><span class='line'><span class="sr">else token.intern</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></div></figure></notextile></div></p>

<p>This will take a token like "None" and return its Ruby representation, in this
case <code>nil</code>. Bits will be converted to Ruby Integers (close enough). Characters
will be interned (converted to Ruby Symbols).</p>

<p>Next, we'll deal with the operations. We can write a simple string scanner that
will lex the operation string and turn it into a list of operation tuples (as
described above).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>parse_operations()  </span></figcaption>
 <div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Turing</span><span class="o">::</span><span class="ss">Parser</span><span class="p">:</span><span class="ss">:Line</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">parse_operations</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;actions.scan(/</span><span class="n">P</span><span class="o">.|</span><span class="n">R</span><span class="o">|</span><span class="n">L</span><span class="o">|</span><span class="n">E</span><span class="o">/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">action</span><span class="o">|</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">action</span>
</span><span class='line'>  <span class="k">when</span> <span class="sr">/P(.)/</span> <span class="k">then</span> <span class="o">[</span><span class="ss">:print</span><span class="p">,</span> <span class="n">parse_token</span><span class="p">(</span><span class="vg">$1</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;R&quot;</span> <span class="k">then</span> <span class="o">[</span><span class="ss">:right</span><span class="o">]</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;L&quot;</span> <span class="k">then</span> <span class="o">[</span><span class="ss">:left</span><span class="o">]</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;E&quot;</span> <span class="k">then</span> <span class="o">[</span><span class="ss">:empty</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure></notextile></div></p>

<p>Now we can parse each instruction line by converting tokens with <code>parse_token</code>
and converting the operations with <code>parse_operations</code> (which, of course, uses
<code>parse_token</code> itself to lex the tokens it scans):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>parse_instruction()  </span></figcaption>
 <div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Turing</span><span class="o">::</span><span class="ss">Parser</span><span class="p">:</span><span class="ss">:Line</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">line</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@line = line</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">parse_instruction</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;tokens = @line.split(&quot;,&quot;).map &amp;amp;:strip</span>
</span><span class='line'><span class="sr">state, symbol, operations, end_state = tokens</span>
</span><span class='line'>
</span><span class='line'><span class="sr">state      = parse_token(state)</span>
</span><span class='line'><span class="sr">symbol     = parse_token(symbol)</span>
</span><span class='line'><span class="sr">operations = parse_operations(operations)</span>
</span><span class='line'><span class="sr">end_state  = parse_token(end_state)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">[state, symbol, operations, end_state]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></div></figure></notextile></div></p>

<h2>Using A Struct For Instructions</h2>

<p>We can add a bit of semantic value to the tuples we use to represent machine
instructions by wrapping them in a struct. In this way, the struct is
functioning like an intermediate data type. The struct will also make it easier
to unpack specific values out of the tuple. Structs also have the useful
property of duck typing as arrays (through the use of <code>to_ary</code>). You can even
splat them, which will come in handy later.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Turing::Machine::Instruction  </span></figcaption>
 <div class="highlight"><pre><code class='ruby'><span class='line'><span class="ss">Turing</span><span class="p">:</span><span class="ss">:Machine</span><span class="o">::</span><span class="no">Instruction</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span> <span class="ss">:state</span><span class="p">,</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;                                      :symbol,</span>
</span><span class='line'><span class="sr">                                      :operations,</span>
</span><span class='line'><span class="sr">                                      :end_state</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Turing::Parser::Line</span>
</span><span class='line'><span class="sr">  def parse_instruction&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">tokens</span> <span class="o">=</span> <span class="vi">@line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="ss">:strip</span>
</span><span class='line'><span class="n">state</span><span class="p">,</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">operations</span><span class="p">,</span> <span class="n">end_state</span> <span class="o">=</span> <span class="n">tokens</span>
</span><span class='line'>
</span><span class='line'><span class="n">state</span>      <span class="o">=</span> <span class="n">parse_token</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'><span class="n">symbol</span>     <span class="o">=</span> <span class="n">parse_token</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
</span><span class='line'><span class="n">operations</span> <span class="o">=</span> <span class="n">parse_operations</span><span class="p">(</span><span class="n">operations</span><span class="p">)</span>
</span><span class='line'><span class="n">end_state</span>  <span class="o">=</span> <span class="n">parse_token</span><span class="p">(</span><span class="n">end_state</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Machine</span><span class="p">:</span><span class="ss">:Instruction</span><span class="o">.</span><span class="n">new</span> <span class="n">state</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">symbol</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">operations</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">end_state</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></div></figure></notextile></div></p>

<h2>Parsing The Machine Specification</h2>

<p>Now that we can parse in individual line, parsing the entire specification is
just a matter of mapping lines to their parsed version:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>parse_specification()  </span></figcaption>
 <div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Turing</span><span class="o">::</span><span class="no">Parser</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">machine_spec</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@machine_spec = machine_spec</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">parse_specification</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@machine_spec.split(&quot;\n&quot;).map do |line|</span>
</span><span class='line'><span class="sr">  Line.new(line).parse_instruction</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></div></figure></notextile></div></p>

<h2>That's (Not) All, Folks</h2>

<p>In upcoming parts, we'll use these instructions to form the basis of our Turing
machine's configuration system; we'll implement the machine's
tape and tape head, which will allow us to step through its execution; and we'll add a
simple renderer that will print out the machine's operations so we can follow along.</p>
]]></content>
  </entry>
  
</feed>
